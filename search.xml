<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[promethes]]></title>
    <url>%2F%2Fblog%2Fpromethes.html</url>
    <content type="text"><![CDATA[promethes架构 或者 监控系统架构]]></content>
  </entry>
  <entry>
    <title><![CDATA[测试环境重启]]></title>
    <url>%2F%2Fblog%2F%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E9%87%8D%E5%90%AF.html</url>
    <content type="text"><![CDATA[环境 所有业务均运行于docker中，通过k8s集群统一管理。业务所需数据库，缓存，消息队列等服务有运行于docker中（k8s-yaml/docker单独启动），也有运行于宿主机中。k8s集群上运行的应用的配置和日志文件则统一挂载在mfs文件系统中。启动k8s前一定要保证依赖服务全部正常运行。 涉及服务 k8s 数据库 转发/代理 zookeeper 启动步骤 1.首先启动192.168.5.4，dnsmasq2.启动基础服务服务器3.启动mfs集群服务器，顺序：mfsmaster –&gt; metalogger –&gt; chunkserver4.启动k8s集群，顺序：k8s-master –&gt; k8s-masterback –&gt; node6.k8s-master1启动服务，顺序：keepalived –&gt; mfs挂载 –&gt; iptables –&gt; docker –&gt; nginx7.k8s-master2，k8s-node等，顺序：mfs挂载 –&gt; iptables –&gt; docker 1.启动DNS 服务器：192.168.5.4某些服务器和容器dns配置的是公司内部DNS，如果dns不启动，会出现网络故障 12$ sudo /usr/sbin/dnsmasq -r /etc/resolv.dnsmasq.conf$ ps -ef |grep dnsmasq 启动其他代理12# 手动执行rc.local文件中的ssh相关命令$ vim /etc/rc.local 2.mfs和nfsmfs集群 备份集群登录192.168.4.139:9425查看集群状态master : 192.168.4.139metalogger : 192.168.4.140chunkserver : 其他 业务集群登录192.168.5.71:9425查看集群状态master : 192.168.5.71metalogger : 192.168.5.72chunkserver : 192.168.5.50(nfs) 3. jenkins-web12# 192.168.4.193$ sudo service nginx start 4.启动基础服务redisxdgc-redis 12345678910111213# 192.168.7.7,xdgc-sso服务使用/opt/redis3/bin/redis-server /opt/redis3/redis.conf &amp;# 192.168.7.7，sso依赖服务$ sudo docker start ssorest cas# cas服务$ sudo docker exec -it ssorest bash /root/tomcat7-rest/bin/startup.sh# ssorest服务$ sudo docker exec -it cas bash/root/tomcat8/bin/catalina.sh start datag组redis12345678# 192.168.4.122$ sudo docker run -p 6379:6379 --restart=always -v /home/ubuntu/redis.conf:/data/redis.conf -d --name dev_redis redis:3.2 redis-server /data/redis.conf# 192.168.4.42service redis-server restart# 192.168.4.41service redis-server restart mongodatag组mongo12345678910111213# 192.168.4.122$ sudo docker run -it -d --name=mongo-28000 -v /data/mongo-28000/configdb:/data/configdb -v /data/mongo-28000/db:/data/db -p 28000:27017 --restart=always mongo:3.0.15# 192.168.4.42，dg组开发环境$ sudo docker restart dg-mongo$ sudo docker run -it -d --name=dg-mongo -h dg-mongo -p 27017:27017 -v /data/mongodb/data:/data/db -v /data/mongodb/log:/data/log regtest.yuanbaopu.com/xdgc/mongo:3.0.14# 192.168.4.41$ sudo docker restart xdgc-mongo###本地mongodb web工具： http://adminmongo.yuanbaopu.com/dbApp/app/login密码：admin rabbitmq192.168.5.46123456789# xdgc rabbitmq$ service rabbitmq-server restart# datag rabbitmq$ docker restart dg_rabbitmq###本地datag rabbitmq管理页面：http://192.168.5.46:35673/#/账密：dgbox dgbox2016 192.168.4.1221$ sudo docker run -it -d --restart=always -p 5672:5672 -p 15672:15672 -h rabbitmq --name rabbitmq -v /app/rabbitmq:/var/lib/rabbitmq regtest.yuanbaopu.com/datag/rabbitmq:3.6.8v2 mysql本地开发1234567891011# 192.168.4.122，dg组本地开发$ sudo docker run --restart=always -h mysql --name mysql -p 3306:3306 -v /app/mysqldb:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=datag -d mysql:5.5# 192.168.4.50,zabbix$ sudo /etc/init.d/mysql start# 192.168.4.25,市民卡master/etc/init.d/mysql start# 192.168.4.46,市民卡slave/etc/init.d/mysqld start zookeeper测试集群12345678# 192.168.5.43,节点1$ sudo /opt/zookeeper-3.4.8/bin/zkServer.sh start/stop# 192.168.4.42,节点2$ sudo /opt/zookeeper-3.4.8/bin/zkServer.sh start/stop# 192.168.4.41,节点3$ sudo /opt/zookeeper-3.4.8/bin/zkServer.sh start/stop 内网可用连接1234567891011# 192.168.4.193,迁移$ sudo /opt/qianyi_zookeeper/bin/zkServer.sh start/stop# 192.168.4.193,测试$ sudo /opt/test_zookeeper/bin/zkServer.sh start/stop# 192.168.4.193,开发$ sudo /opt/zookeeper-3.4.6/bin/zkServer.sh start/stop# 192.168.4.193,数据贷$ sudo /opt/sjd_zookeeper/bin/zkServer.sh start/stop zookeeper-web 运行jenkins发布 检测web端是否运行12$ sudo ss -tunlp|grep 8901$ sudo ss -tunlp|grep 3009 如果web能显示不能打开，运行以下命令1$ nohup java -Dresources.dir=resources/ -jar xdgc_openapi.jar --spring.config.location=resources/ &amp; 另外,不知道是否需要运行node-zk1$ /opt/node-zk-browser/start.sh 5. k8s集群k8s-master1 123456789101112131415161718192021222324252627282930313233343536# 挂载，先切换至root用户sudo su/usr/bin/mfsmount -o nonempty /data -H mfsmastermount -t nfs -o rw,hard,nointr,noac,vers=3,rsize=32768,wsize=32768 192.168.5.50:/mnt/nfs/logs /data/logsnohup /home/ubuntu/xdgc_sms/bin/exec.sh &amp;mount -t cifs -o username=logs,password=123456 //192.168.4.124/logs /data/logs/datag_dgafterloan_worker/4.124mount -t cifs -o username=logs,password=123456 //192.168.4.117/logs /data/logs/datag_dgtax_worker/4.117mount -t cifs -o username=logs,password=123456 //192.168.4.171/logs /data/logs/datag_dgtax_worker/4.171mount -t cifs -o username=logs,password=123456 //192.168.4.170/logs /data/logs/datag_jd_worker/4.170mount -t cifs -o username=logs,password=123456 //192.168.4.165/logs /data/logs/datag_jd_catch/4.165**其他服务**# keepalived开机自启动# nginx$ sudo service nginx start# haproxy$ sudo service haproxy start# samba$ sudo docker start samba# iptables$ sudo bash /data/conf/kube_conf/scripts/accept.sh &gt; /dev/null 2&gt;&amp;1 &amp;# 短信网关nohup /home/ubuntu/xdgc_sms/bin/exec.sh &amp; k8s-master212345678910111213# 挂载/usr/bin/mfsmount -o nonempty /data -H mfsmastermount -t nfs -o rw,hard,nointr,noac,vers=3,rsize=32768,wsize=32768 192.168.5.50:/mnt/nfs/logs /data/logs# haproxy$ sudo service haproxy start# nginx$ sudo service nginx start# iptables$ sudo bash /data/conf/kube_conf/scripts/accept.sh &gt; /dev/null 2&gt;&amp;1 &amp; node， harbor(5.37)， standalone(5.70) 1234567# 挂载/usr/bin/mfsmount -o nonempty /data -H mfsmastermount -t nfs -o rw,hard,nointr,noac,vers=3,rsize=32768,wsize=32768 192.168.5.50:/mnt/nfs/logs /data/logs# iptables$ sudo bash /data/conf/kube_conf/scripts/accept.sh &gt; /dev/null 2&gt;&amp;1 &amp; 192.168.4.41 192.168.4.42 192.168.5.46 192.168.5.4312# iptables$ sudo bash /data/conf/kube_conf/scripts/accept.sh &gt; /dev/null 2&gt;&amp;1 &amp; 6.crowd1234567891011# nginx$ sudo service nginx start# crowd$ sudo bash /data/atlassian/atlassian-crowd-2.7.2/start_crowd.sh# confluence$ sudo bash /data/atlassian/confluence/bin/startup.sh# jira$ sudo bash /data/atlassian/atlassian-jira-6.3.12-standalone/bin/startup.sh 7. maven/nexus仓库12# 192.168.4.107$ /data/nexus-2.8.1-01/bin/nexus start 8. haproxy12# 192.168.4.49$ sudo service haproxy start 故障解决1.k8s故障etcd集群，flanneld，127.0.0.1端口访问，服务访问故障（服务没启动） 2.mfs故障挂载失败，找不到文件等1$ mfsfileinfo application.properties 3.zk故障没有启动zk-web 4.网络故障iptables flanneld重启]]></content>
      <categories>
        <category>系统</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[lamba表达式]]></title>
    <url>%2F%2Fblog%2Flamba%E5%87%BD%E6%95%B0.html</url>
    <content type="text"><![CDATA[lamba表达式 可以使用 Lambda 表达式创建匿名函数，即没有名称的函数。lambda 表达式非常适合快速创建在代码中以后不会用到的函数。尤其对高阶函数或将其他函数作为参数的函数来说，非常实用。 例如，可以使用 lambda 表达式将以下函数12def multiply(x, y): return x * y 简写为：1double = lambda x, y: x * y Lambda 函数的组成部分1.关键字 lambda 表示这是一个 lambda 表达式。 2.lambda 之后是该匿名函数的一个或多个参数（用英文逗号分隔），然后是一个英文冒号 :。和函数相似，lambda 表达式中的参数名称是随意的。 3.最后一部分是被评估并在该函数中返回的表达式，和你可能会在函数中看到的 return 语句很像。 鉴于这种结构，lambda 表达式不太适合复杂的函数，但是非常适合简短的函数。 练习：Lambda 与 Mapmap() 是一个高阶内置函数，接受函数和可迭代对象作为输入，并返回一个将该函数应用到可迭代对象的每个元素的迭代器。下面的代码使用 map() 计算 numbers 中每个列表的均值，并创建列表 averages。测试运行这段代码，看看结果如何。 通过将 mean 函数替换为在 map() 的调用中定义的 lambda 表达式，重写这段代码，使代码更简练。123456789101112numbers = [ [34, 63, 88, 71, 29], [90, 78, 51, 27, 45], [63, 37, 85, 46, 22], [51, 22, 34, 11, 18] ]#def mean(num_list):# return sum(num_list) / len(num_list)averages = list(map(lambda x: sum(x) / len(x), numbers))print(averages) 练习：Lambda 与 Filterfilter() 是一个高阶内置函数，接受函数和可迭代对象作为输入，并返回一个由可迭代对象中的特定元素（该函数针对该元素会返回 True）组成的迭代器。下面的代码使用 filter() 从 cities 中获取长度少于 10 个字符的名称以创建列表 short_cities。测试运行这段代码，看看结果如何。 通过将 is_short 函数替换为在 filter() 的调用中定义的 lambda 表达式，重写这段代码，使代码更简练。1234567cities = ["New York City", "Los Angeles", "Chicago", "Mountain View", "Denver", "Boston"]#def is_short(name): # return len(name) &lt; 10short_cities = list(filter(lambda x: len(x) &lt; 10, cities))print(short_cities)]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SVN]]></title>
    <url>%2F%2Fblog%2Fhello-world.html</url>
    <content type="text"><![CDATA[一.日常使用手册 1.创建svn项目1# svnadmin create /data/svn/newproject --svn项目：newproject 2.创建用户1# htpasswd /data/svnauth/passwd newuser --用户：newuser 3.配置仓库权限1234567891011# vim /data/svnauth/authz[groups] --配置组，用户develop = test1,test2,testzl --格式：组 = 用户 多个用户用逗号隔开android = test3admin = zhouladmindgg = dg --不同项目之间空一行隔开[newproject:/] --配置svn项目权限@develop = rw@admin = rw* = 注意：使用浏览器登陆仓库后会保存缓存，导致无法登陆其他仓库，清理浏览器缓存即可 二、部署 1.安装1# apt-get -y install subversion apache2 libapache2-svn ssl-cert 如果apache相关软件无法安装，则换一个安装源再次安装即可 更换国内源1234567891011121314# mv /etc/apt/sources.list /etc/apt/sources.list.bak# cat &gt; /etc/apt/sources.list &lt;&lt; EOF deb http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse EOF# apt-get update 查看安装版本123# svn –versionsvn, version 1.8.8 (r1568071) compiled Aug 10 2017, 17:20:39 on x86_64-pc-linux-gnu 2.配置 2.1svn仓库基本配置 创建svn仓库存储路径1# mkdir -p /data/svn 修改/data目录属性 12# chown -R www-data:www-data /data/# chmod 755 -R /data/ 2.2创建svn仓库1# svnadmin create /data/svn/devroot --仓库名：devroot 2.3svn仓库权限配置 svn仓库权限，可以进行单独配置，也可以进行统一配置。考虑实际情况，一般会有多个svn仓库，这里采用统一配置。 创建用于管理所有仓库帐号密码、权限控制等的目录svnauth1# mkdir -p /data/svnauth/ 创建svn仓库权限的总控制文件svnserve.conf12345678910111213141516# vim /data/svnauth/svnserve.conf[general]#未鉴定的用户无权限访问该版本库anon-access = none#鉴定后的可读写版本库auth-access = write#使用的密码文件是同级路径的passwd文件，即是/data/svnaut/passwdpassword-db = passwd#使用的权限控制文件是同级路径的authz文件，即是/data/svndauth/authzauthz-db = authz#realm指定版本库的认证域，即在登录时提示的认证域名称。各个仓库的认证域都可以自定义realm = svnauth 创建passwd文件1# touch /data/svnauth/passwd 创建authz文件1234567891011# vim /data/svndata/authz[groups] //用户组配置develop = test1,test2,testzl //定义develop用户组成员test1,test2,testzlandroid = test3admin = zhouladmindgg = dg[devroot:/] //仓库权限配置，仓库名：devroot@develop = rw //develop用户组具有读（r）写(w)权限@admin = rw* = //其他用户和组没有访问权限 2.4配置访问方式（此处为https） 配置apache21234567891011# vim /etc/apache2/mods-available/dav_svn.conf&lt;Location /repos&gt; DAV svn SVNParentPath /data/svn AuthzSVNAccessFile /data/svnauth/authz AuthType Basic AuthName "Authorization Realm" AuthUserFile /data/svnauth/passwd Require valid-user SSLRequireSSL&lt;/Location&gt; 启用ssl模块1# a2enmod ssl 如果没有a2enmod指令，也可直接在apache2.conf中设置SSL模块加载，如下：1LoadModule ssl_module /usr/lib/apache2/modules/mod_ssl.so 启用SSL站点1# a2ensite default-ssl 重启apache1# service apache2 restart 2.5设置svn的用户和密码 1# htpasswd -cm /data/svnauth/passwd testzl --创建用户：testzl 配置用户权限 1# vim /data/svnauth/authz --配置testzl的组和访问svn仓库的权限 3.访问测试 浏览器输入：https://IP/repos/devroot]]></content>
      <tags>
        <tag>版本管理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[rabbitmq添加虚拟主机]]></title>
    <url>%2F%2Fblog%2FPlan.html</url>
    <content type="text"><![CDATA[创建用户（如果没有的话） 1# rabbitmqctl add_user test 123456 --用户：test，密码：123456 创建虚拟主机1# rabbitmqctl add_vhost test_host --虚拟主机名：test_host 查看虚拟主机列表1# rabbitmqctl list_vhosts 配置用户权限（此处为读写权限）1# rabbitmqctl set_permissions -p test_host test ".*" ".*" ".*" --用户test对test_host虚拟主机具有读写权限]]></content>
      <categories>
        <category>服务</category>
      </categories>
      <tags>
        <tag>中间件</tag>
      </tags>
  </entry>
</search>
